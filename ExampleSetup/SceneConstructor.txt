deleteall;

## MESH ORDER NOTES ##
#1 - Au Particle
#2 - NW Base
#3 - Substrate oxide
#4 - Ti
#5 - Au
#6 - Waveguide material (if any)
#6 - Substrate
MESH_AUPARTICLE  = 1;
MESH_NWBASE      = 2;
MESH_SUBSTRATEOX = 3;
MESH_TICNT       = 4;
MESH_ETCHCNT     = 4; #Note, you need to fill any holes with a MESH_ETCH-1 waveguide if you use this.
MESH_AUCNT       = 5;
MESH_WAVEGUIDE   = 6;
MESH_SUBSTRATE   = 6;
MESH_TIAU        = [MESH_TICNT,MESH_AUCNT];

NWL = %NW_Len%*1e-6; NWRad = %NW_Rad%*1e-6; NWRot = %NW_Rot%;
 NWx = %NW_x%*1e-6; NWy = %NW_y%*1e-6; NWz = ((%NW_z%*1e-6)+(NWRad));
    
#PLANAR WAVEGUIDE AND ALD SETUP
ALD_T  = %Thickness_ALD%;
ALD_WG = %ALD_WG%;
if(Waveguide == 0)
{
    ALD_WG = 0;
    ALD_T  = 0;
}

Tr_D = %Trench_Depth%;
if(%Trench% == 0)
{
    Tr_D  = 0;
}


## Wafer Substrate Creation ##
addstructuregroup;
set("name","Wafer");

wafer_xmax = %Sub_Base_xyspan%/2; wafer_ymax = %Sub_Base_xyspan%/2;
wafer_xmin = -%Sub_Base_xyspan%/2; wafer_ymin= -%Sub_Base_xyspan%/2;

substrate_zmax = -%Sub_Ox_zspan% + Tr_D;
substrate_zmin = substrate_zmax-%Sub_Base_zspan%;

ox_zmin = substrate_zmax ; ox_zmax = ox_zmin+%Sub_Ox_zspan%; ox_ztrench = ox_zmax-Tr_D;

#Substrate
addrect;
set("name","Substrate");
set("x max",wafer_xmax); set("x min",wafer_xmin);
set("y max",wafer_ymax); set("y min",wafer_ymin);
set("z max",substrate_zmax); set("z min",substrate_zmin);
set("material",%MAT_Substrate%);
set("override mesh order from material database",1); set("mesh order",MESH_SUBSTRATE);
addtogroup("Wafer");



#Substrate Oxide in the case of no trench
if(%Trench% == 0)
{
    oxmax = ox_zmax;
}
if(%Trench% == 1)
{
    oxmax = ox_ztrench;    
}   
    addrect;
    set("name","Substrate_Oxide_1");
    set("x max",wafer_xmax); set("x min",wafer_xmin);
    set("y max",wafer_ymax); set("y min",wafer_ymin);
    set("z max",oxmax); set("z min",ox_zmin);
    set("override mesh order from material database",1); set("mesh order",MESH_SUBSTRATEOX);
    set("material",%MAT_Substrate_Ox%);
    addtogroup("Wafer");  


if(Waveguide  == 1)
{
    #For both ALD and non ALD thicknesses, we just adjust the thickness to match the ALD if ALD is true
    WG_zspan = %WG_zspan%;    
    if(ALD_WG == 1)
    {
        WG_zspan = ALD_T;
    }
    addrect;
    set("name","WG Oxide");
    set("x max",wafer_xmax); set("x min",wafer_xmin);
    set("y max",wafer_ymax); set("y min",wafer_ymin);
    set("z max",ox_ztrench+WG_zspan); set("z min",ox_ztrench);
    set("override mesh order from material database",1); set("mesh order",MESH_WAVEGUIDE);
    set("material",%MAT_WG%);
    addtogroup("Wafer");  
}


#Trench "Etch" we are instead defining the blocks of oxide, since this is more convenient in the long run.
#Check if we have an odd or even number of trenche

T_num = %Trench_Number%;
if(mod(T_num,2) == 0)
{
    oddnum = -1;
}
    
if(mod(T_num,2) != 0)
{
    oddnum = 1;
}

if(%Trench% == 1)
{
    if(%Au_Contacts% == 1)
    {
        addstructuregroup;
        set("name","TiAu Contacts Trench");
        CNT_T   = [%Contact_Ti_Thick%,%Contact_Au_Thick%+%Contact_Ti_Thick%];
        CNT_Rad = [CNT_T(1)*%Contact_RadiusRatio%,CNT_T(2)*%Contact_RadiusRatio%];
        CNT_NW  = %Contact_NWidth% ;
        CNT_WW  = %Contact_WWidth% ;
        miInd   = [1,-1];
        NWupdwn = matrix(length(NW_x));
        TrenchLims = matrix(length(NW_x));      
        
        nameprefix = {"","FAKE"};    
        CNT_MAT = {%MAT_CNTTI%,%MAT_CNTAU%};
        TiAuSTR = {"Ti","Au"};
        CNT_OHang = CNT_T * %Contact_OverhangRatio%;
        CNT_Ny    = matrix(2);
        CNT_Wy    = matrix(2);
        
        for(NWID = 1:length(NW_x))
        {   if(NW_y(NWID)> 0){NWupdwn(NWID) = -1;}
            if(NW_y(NWID)< 0){NWupdwn(NWID) = 1;}
            addstructuregroup;
            set("name","NW"+num2str(NWID)+"Contacts");
            addtogroup("TiAu Contacts Trench");
        }
        
     }
    
     for(i = 1:T_num+1)
    {   
        iT = (i-(T_num+oddnum)/2);
        xt_max = iT*%Trench_Sep%  - %Trench_Width%/2;
        xt_min = (iT-1)*%Trench_Sep%  + %Trench_Width%/2;
        yt_max = wafer_ymax - %Trench_Sep%;
        yt_min = wafer_ymin + %Trench_Sep%;
        zt_max = Tr_D; zt_min = 0;
        
        #Now we make exception cases so that the blocks extend to the limits at i = 1 and i = T_num
        if(i == 1)
        {
            xt_min = wafer_xmin;
        }
        if(i == T_num+1)
        {
            xt_max = wafer_xmax;
        }
        
        addrect;
        set("name","Trench Blocks");
        set("x max",xt_max); set("x min",xt_min);
        set("y max",yt_max); set("y min",yt_min);
        set("z max",zt_max); set("z min",zt_min);
        set("override mesh order from material database",2); set("mesh order",MESH_SUBSTRATEOX);
        set("material",%MAT_Substrate_Ox%);    
        addtogroup("Wafer");
        
        if(%Au_Contacts% == 1)
            {   
                for(NWID = 1:length(%NW_x%))
                {   
                    
                    CNT_W = CNT_WW; 
                    if(iT >= 0 and iT <= 1)
                        {
                            CNT_W = CNT_NW; 
                        }
                     
                    if(i == T_num+1 and NWID == 1)
                    {
                        TrenchLims(NWID) = xt_min +  0.5*%Trench_Width%;
                    }
                    if(i == 1 and NWID == 2)
                    {
                        TrenchLims(NWID) = xt_max - 0.5*%Trench_Width% ;
                    }
                    
                    if((i != T_num+1 and NWID == 1) or (i != 1 and NWID == 2)) 
                    {

                        for(j = 1:2)
                        {
                            for(k =1:2) 
                            {   
                                if(CNT_T(k) != 0)
                                {   
                                    
                                    #We correct the lims of the gold contacts on the side
                                    if(i == 1)
                                        {
                                            xt_min = (iT-1)*%Trench_Sep%  + %Trench_Sep%/2 + %Trench_Width%/1.5 ;
                                        }
                                        if(i == T_num+1)
                                        {
                                            xt_max = iT*%Trench_Sep%  - %Trench_Sep%/2 - %Trench_Width%/1.5 ;
                                        }
                                    #TI/AU Contact
                                    addobject("rd_quad_extpoly");   
                                    set("name","NW"+num2str(NWID)+"_"+nameprefix{j}+TiAuSTR{k} +"_"+num2str(i));
                                    addtogroup("TiAu Contacts Trench::NW"+num2str(NWID)+"Contacts");                    
                                    set("x",miInd(j)*(xt_min + (xt_max - xt_min)/2));
                                    set("y",0);
                                    set("z",Tr_D);
                                    set("x span",(xt_max - xt_min)+2*CNT_OHang(k));
                                    set("y span",(CNT_W));
                                    set("z span",(CNT_T(k)));
                                    set("radius",(CNT_Rad(k))); 
                                    set("material",CNT_MAT{k});
                                    
                                    #Get the structure group script so you can add these lines to it.
                                    script = get("script")  ;                              
                                    set("script",script+'
                                    selectall;
                                    set("override mesh order from material database",2);
                                    set("mesh order",'+num2str(MESH_TIAU(k))+');
                                    '); 
                                    set("construction group",0);
                                }
                            }
                                
                        }
                                           
                    }
                    select("TiAu Contacts Trench::NW"+num2str(NWID)+"Contacts");
                    set("first axis","z");
                    set("rotation 1",NWRot(NWID));
                    CNT_Ny(NWID) = NWy(NWID)+NWupdwn(NWID)*NWL(NWID)/2 + NWupdwn(NWID)*-1*%Contact_NOverlap%;
                    set("y",CNT_Ny(NWID));
                    unselectall;
                    for(k =1:2) 
                    {  
                        #Deleting FAKES used for correct rotation of contacts!
                        select("TiAu Contacts Trench::NW"+num2str(NWID)+"Contacts::NW"+num2str(NWID)+"_FAKE"+TiAuSTR{k} +"_"+num2str(i));   
                        delete;
                        
                    }
                }
            }        
        
        if(ALD_WG == 1 and %Waveguide% == 1)
        {
            addrect;
            set("name","Trench Blocks ALD");
            set("x max",xt_max+ALD_T); set("x min",xt_min-ALD_T);
            set("y max",yt_max+ALD_T); set("y min",yt_min-ALD_T);
            set("z max",zt_max+ALD_T); set("z min",zt_min);
            set("override mesh order from material database",2); set("mesh order",MESH_WAVEGUIDE);
            set("material",%MAT_WG%);    
            addtogroup("Wafer");
        }
            
        #"Hub" Structure
        if(%Hub_Blocker% == 1)
        {
            addrect;
            set("name","Oxide Hub");
            set("x max",xt_max); set("x min",xt_min);
            set("y max",%Hub_Radius%); set("y min",-%Hub_Radius%);
            set("z max",zt_max); set("z min",zt_min);
            set("z max",zt_max); set("z min",zt_min);
            set("override mesh order from material database",2); set("mesh order",MESH_SUBSTRATEOX);
            set("material",%MAT_Substrate_Ox%);
            addtogroup("Wafer");
        }  
    }
    
}
Trench_xmax = (T_num-(T_num+oddnum)/2)*%Trench_Sep% + %Trench_Width%/2;
Trench_xmin = (1-(T_num+oddnum)/2)*%Trench_Sep%  - %Trench_Width%/2;

#############################################
#  N A N O W I R E  C O N S T R U C T I O N #
#############################################

addstructuregroup;
set("name","Antennas");
for(i = 1:length(%NW_x%)){
    addstructuregroup;
    set("name", "Antenna_"+num2str(i));
    addtogroup("Antennas");    
    
    addstructuregroup;
    set("name","Nanowire_"+num2str(i));
    addtogroup("Antennas::Antenna_"+num2str(i));
    
    #BASE (n)
    addcircle;
    set("name","Nanowire_"+num2str(i));
    set("make ellipsoid",1); 
    set("z span",NWL(i));			
    set("radius",NWRad(i));          				
    set("radius 2",NWRad(i));  
    set("override mesh order from material database",1); set("mesh order",MESH_NWBASE); 
    set("material",%MAT_NW%); addtogroup("Antennas::Antenna_"+num2str(i)+"::Nanowire_"+num2str(i));
    
    AU_MOD = 1;
    AU_zoff = 0.02e-6;
    #Gold Particle
    addsphere;
    set("name","Au Particle"+num2str(i));
    set("make ellipsoid",1);
    set("z",NWL(i)/2+AU_zoff);
    set("radius",  NWRad(i)*AU_MOD);			
    set("radius 2",NWRad(i)*AU_MOD);          				
    set("radius 3",NWRad(i)*AU_MOD);        				
    set("override mesh order from material database",1); set("mesh order",MESH_AUPARTICLE); 
    set("material",%MAT_AuDot%); addtogroup("Antennas::Antenna_"+num2str(i)+"::Nanowire_"+num2str(i));
    
    #Gold Particle (This is a fake particle to make rotation accurate)
    addsphere;
    set("name","FAKE_Au"+num2str(i));
    set("make ellipsoid",1);
    set("z",-NWL(i)/2-AU_zoff);
    set("radius",  NWRad(i)*AU_MOD);			
    set("radius 2",NWRad(i)*AU_MOD);          				
    set("radius 3",NWRad(i)*AU_MOD);        				
    set("override mesh order from material database",1); set("mesh order",MESH_AUPARTICLE); 
    set("material",%MAT_AuDot%); addtogroup("Antennas::Antenna_"+num2str(i)+"::Nanowire_"+num2str(i));
    
    #Rotate nanowire group
    select("Antennas::Antenna_"+num2str(i)+"::Nanowire_"+num2str(i));
    set("first axis","x");# rotate so cone is oriented along Z axis
    set("rotation 1",90);
    set("second axis","z");
    
    if(ALD_WG == 1 and %Waveguide% == 1)
    {
        addstructuregroup;
        set("name","Nanowire_ALD_"+num2str(i));
        addtogroup("Antennas::Antenna_"+num2str(i));
        
        #BASE (n)
        addcircle;
        set("name","Nanowire_ALD_"+num2str(i));
        set("make ellipsoid",1);
        set("z max",NWL(i)/2 );
        set("z min",-NWL(i)/2);
        set("radius",NWRad(i)+ALD_T);          				
        set("radius 2",NWRad(i)+ALD_T);  
        set("override mesh order from material database",1); set("mesh order",MESH_WAVEGUIDE); 
        set("material",%MAT_WG%); addtogroup("Antennas::Antenna_"+num2str(i)+"::Nanowire_ALD_"+num2str(i));
        
        #ALD on Gold Particle
        addsphere;
        set("name","Au Particle_ALD"+num2str(i));
        set("make ellipsoid",1);
        set("z",NWL(i)/2+AU_zoff);
        set("radius",  NWRad(i)*AU_MOD+ALD_T);			
        set("radius 2",NWRad(i)*AU_MOD+ALD_T);          				
        set("radius 3",NWRad(i)*AU_MOD+ALD_T);        				
        set("override mesh order from material database",1); set("mesh order",MESH_WAVEGUIDE); 
        set("material",%MAT_WG%); addtogroup("Antennas::Antenna_"+num2str(i)+"::Nanowire_ALD_"+num2str(i));
   
        
        #Gold Particle (This is a fake particle to make rotation accurate)
        addsphere;
        set("name","FAKE_Au_ALD_"+num2str(i));
        set("make ellipsoid",1);
        set("z",-NWL(i)/2-AU_zoff);
        set("radius",  NWRad(i)*AU_MOD+ALD_T);			
        set("radius 2",NWRad(i)*AU_MOD+ALD_T);          				
        set("radius 3",NWRad(i)*AU_MOD+ALD_T);        				
        set("override mesh order from material database",1); set("mesh order",MESH_WAVEGUIDE); 
        set("material",%MAT_WG%); addtogroup("Antennas::Antenna_"+num2str(i)+"::Nanowire_ALD_"+num2str(i));
        
        #soft sphere ALD on "non Gold Particle" 
        addsphere;
        set("name","NW_rounded_nonparticle_ALD_"+num2str(i));
        set("make ellipsoid",1);
        set("z",-NWL(i)/2-AU_zoff);
        set("radius",  NWRad(i)*AU_MOD+ALD_T);			
        set("radius 2",NWRad(i)*AU_MOD+ALD_T);          				
        set("radius 3",NWRad(i)*AU_MOD/2+ALD_T);        				
        set("override mesh order from material database",1); set("mesh order",MESH_WAVEGUIDE); 
        set("material",%MAT_WG%); addtogroup("Antennas::Antenna_"+num2str(i)+"::Nanowire_ALD_"+num2str(i));
                
        
        #Rotate nanowire group
        select("Antennas::Antenna_"+num2str(i)+"::Nanowire_ALD_"+num2str(i));
        set("first axis","x");# rotate so cone is oriented along Z axis       
        set("rotation 1",90);
        set("second axis","z");
        
             
    }
}

################################################################
#  N A N O W I R E    A N T E N N A    C O N S T R U C T I O N #
################################################################

x_span_arr = [%dir_Dy%,%refl_Dy%];
y_span_arr = [%dir_Dx%,%refl_Dx%];
z_span_arr = [%dir_Dz%,%refl_Dz%];

#We skip looping through WG creation if we don't have one by letting wgi_max be 1 unless ALD_WG==1
wgi_max = 1; #Because we already used l,m,n, we will use wgi
if (%ALD_WG% == 1)
{wgi_max = 2;}
#We let l=1 be the gold set, and 
dxyzm = [0,%Thickness_ALD%]; #delta x,y,z mod, is zero unless making waveguide
wgmat  = {%MAT_AuDot%,%MAT_WG%};
wgmesh = [MESH_AUPARTICLE,MESH_WAVEGUIDE]; 
wgpf   = {"","WG_"};
drrmod = [0,ALD_T/4];
#Now we check for if we have a reflector.
N_dir_ref = %N_Directors%;
if(N_dir_ref>1){
Dir_XYZ   = matrix(N_dir_ref*length(%NW_x%),3); }
if(N_dir_ref == 0)
{Dir_XYZ = matrix(3,3);}
if(%isreflector%==1)
{N_dir_ref = %N_Directors%+1;}

##RIBBON DETAILS
rib_rot     = %Rot_Ribbon%*pi/180; #convert for correct usage
if ((mod(%Rot_Ribbon%,360) > 180)&(%Side_Rib%==1)){rib_sidemod = 1; rib_offset_delay=0;} 
if ((mod(%Rot_Ribbon%,360) <= 180)&(%Side_Rib%==1)){rib_sidemod = -1; rib_offset_delay=1;} 
if ((mod(%Rot_Ribbon%,360) > 180)&(%Side_Rib%==-1)){rib_sidemod = 1; rib_offset_delay=0;} 
if ((mod(%Rot_Ribbon%,360) <= 180)&(%Side_Rib%==-1)){rib_sidemod = -1;rib_offset_delay=1;} 
rib_yoffset = %dir_Dy%*(sin(rib_rot)) *rib_sidemod; 


rib_i_start = %N_Directors% - %N_Ribbons% + rib_offset_delay;

Refl_XYZ  = matrix(length(%NW_x%),3);

if(N_dir_ref>0)
{
for(wgi=1:wgi_max)
{
    
    
    
    for(m=1:length(%NW_x%))
    {
        
        
        for(n=1:N_dir_ref)
        {
            rib_added_offset = 0;
         
            if((%N_Directors%>=n)&(n>rib_i_start))
            {rib_added_offset = (n-rib_i_start)*rib_yoffset;}  
            
            y_r    = %dir_x_radius%+drrmod(wgi);
            x_r    = %dir_y_radius%+drrmod(wgi);
            z_r    = %dir_z_radius_top%+drrmod(wgi);    
                
            for(l=1:2)
            { 
                fmod       = [-1,1];    
                dir_yoffset = NWRad(m)/2;
                if(%director_lengthwise%==1)
                {
                    dir_yoffset = NWL(m)/2 + NWRad(m)/1.1;
                }
                
            if(n==%N_Directors%+1)
                {
                    nameprefix = {wgpf{wgi}+"",wgpf{wgi}+"FAKE_"};
                    x_span = x_span_arr(2) + 2*dxyzm(wgi);
                    y_span = y_span_arr(2) + 2*dxyzm(wgi);
                    z_span = z_span_arr(2) + 2*dxyzm(wgi);
                    rd_yloc = -dir_yoffset - director_sep ;
                }
                
            if(n!=%N_Directors%+1)
                {
                    nameprefix = {wgpf{wgi}+"FAKE_",wgpf{wgi}+""};
                    x_span = x_span_arr(1) + 2*dxyzm(wgi);
                    y_span = y_span_arr(1) + 2*dxyzm(wgi);
                    z_span = z_span_arr(1) + 2*dxyzm(wgi);
                    rd_yloc = -dir_yoffset - n*director_sep + rib_added_offset;
                    
                } 
                
                # co-ordinates of the eight corners
                x=[-x_span/2+x_r,x_span/2-x_r];
                y=[-y_span/2+y_r,y_span/2-y_r];
                z=[-z_span/2+z_r,z_span/2-z_r];
                rot=[-90,90];
                
                # center rectangle + top piece
                addrect;
                set("x",0);
                set("y",0);
                set("z",0);
                set("x span",x_span-2*x_r);
                set("y span",y_span-2*y_r);
                set("z span",z_span);
                
                
                for(i=1:2) {
                # side rectangles
                addrect;
                set("x",x(i));
                set("y",0);
                set("z",0);
                set("x span",2*x_r);
                set("y span",y_span-2*y_r);
                set("z span",z_span-2*z_r);
                addrect;
                set("x",0);
                set("y",y(i));
                set("z",0);
                set("x span",x_span-2*x_r);
                set("y span",2*y_r);
                set("z span",z_span-2*z_r);   
                for(j=1:2) {
                    # top rounded edges
                    addcircle;
                    #along y direction, intersecting with x and z-curvature
                    set("z span",y_span-2*y_r);
                    set("radius",x_r);
                    set("make ellipsoid",1);
                    set("radius 2",z_r);
                    set("x",x(i));
                    set("y",0);
                    set("first axis","x");
                    set("rotation 1",rot(j));
                    set("z",z(j));
                    
                    #along x direction, intersecting with y and z curvature
                    addcircle;
                    set("x",0);
                    set("z span",x_span-2*x_r);
                    set("radius",z_r);
                    set("make ellipsoid",1);
                    set("radius 2",y_r);
                    set("y",y(i));
                    set("first axis","y");
                    set("rotation 1",rot(j));
                    set("z",z(j));
                    # side rounded edges intersecting with x and y curvature
                    addcircle;
                    set("z span",z_span-2*z_r);  
                    set("z",0);
                    set("radius",x_r);
                    set("make ellipsoid",1);
                    set("radius 2",y_r);
                    set("x",x(i));
                    set("y",y(j));
                    for(k=1:2) {
                    # rounded corners
                    addsphere;
                    set("z",z(k));
                    set("make ellipsoid",1);
                    set("radius",x_r);
                    set("radius 2",y_r);
                    set("radius 3",z_r);
                    set("x",x(i));
                    set("y",y(j));
                    }  
                }
                }
                
                
                if(n!=%N_Directors%+1)
                {
                    
                    z_r    = %dir_z_radius_bot%+drrmod(wgi)/2;
                    x_span = %dir_Dy%; #NOTE THAT THESE ARE SWAPPED TO MAINTAIN HOW WE PREVIOUSLY DEFINED THEM.
                    y_span = %dir_Dx%;
                    z_span = %dir_Dz%/2;
                    
                }
                
            if(n==%N_Directors%+1)
                {
                   
                    z_r    = %dir_z_radius_bot%+drrmod(wgi)/2;
                    x_span = %refl_Dy%; #NOTE THAT THESE ARE SWAPPED TO MAINTAIN HOW WE PREVIOUSLY DEFINED THEM.
                    y_span = %refl_Dx%;
                    z_span = %refl_Dz%/2;
                    
                    
                } 
                
                
                
                # co-ordinates of the eight corners
                x=[-x_span/2+x_r,x_span/2-x_r];
                y=[-y_span/2+y_r,y_span/2-y_r];
                z=[z_span/2-z_r-z_span/2,-z_span/2+z_r-z_span/2];
                rot=[-90,90];
                
                # center rectangle + top piece
                addrect;
                set("x",0);
                set("y",0);
                set("z",-z_span/2);
                set("x span",x_span-2*x_r);
                set("y span",y_span-2*y_r);
                set("z span",z_span-2*z_r);
                
                for(i=1:2) {
                # side rectangles
                addrect;
                set("x",x(i));
                set("y",0);
                set("z",-z_span/2);
                set("x span",2*x_r);
                set("y span",y_span-2*y_r);
                set("z span",z_span-2*z_r);
                addrect;
                set("x",0);
                set("y",y(i));
                set("z",-z_span/2);
                set("x span",x_span-2*x_r);
                set("y span",2*y_r);
                set("z span",z_span-2*z_r);   
                for(j=1:2) {
                    # top rounded edges
                    addcircle;
                    #along y direction, intersecting with x and z-curvature
                    set("z span",y_span-2*y_r);
                    set("radius",x_r);
                    set("make ellipsoid",1);
                    set("radius 2",z_r);
                    set("x",x(i));
                    set("y",0);
                    set("first axis","x");
                    set("rotation 1",rot(j));
                    set("z",z(j));
                    
                    #along x direction, intersecting with y and z curvature
                    addcircle;
                    set("x",0);
                    set("z span",x_span-2*x_r);
                    set("radius",z_r);
                    set("make ellipsoid",1);
                    set("radius 2",y_r);
                    set("y",y(i));
                    set("first axis","y");
                    set("rotation 1",rot(j));
                    set("z",z(j));
                    # side rounded edges intersecting with x and y curvature
                    addcircle;
                    set("z span",z_span-2*z_r);  
                    set("z",-z_span/2);
                    set("radius",x_r);
                    set("make ellipsoid",1);
                    set("radius 2",y_r);
                    set("x",x(i));
                    set("y",y(j));
                    for(k=1:2) {
                    # rounded corners
                    addsphere;
                    set("z",z(k));
                    set("make ellipsoid",1);
                    set("radius",x_r);
                    set("radius 2",y_r);
                    set("radius 3",z_r);
                    set("x",x(i));
                    set("y",y(j));
                    }  
                }
                }
                z_r    = %dir_z_radius_top%+drrmod(wgi);
                z_correction =  -%NW_Rad%(m)*1e-6 + %dir_Dz%/2 ;
                # material for group object
                addstructuregroup;
                set("name",nameprefix{l}+"Director_"+num2str(n));
                addtogroup("Antennas::Antenna_"+num2str(m));
                selectpartial("rectangle");
                shiftselectpartial("circle");
                shiftselectpartial("sphere");
                set("material",wgmat{wgi});
                set("override mesh order from material database",1); set("mesh order",wgmesh(wgi));
                addtogroup("Antennas::Antenna_"+num2str(m)+"::"+nameprefix{l}+"Director_"+num2str(n));
                unselectall;

                select("Antennas::Antenna_"+num2str(m)+"::"+nameprefix{l}+"Director_"+num2str(n));
                set("y",fmod(l)*(rd_yloc));
                
                select("Antennas::Antenna_"+num2str(m)+"::"+nameprefix{l}+"Director_"+num2str(n));
                set("z",z_correction); 
                
                if(nameprefix{l}!="FAKE_")
                {
                if(wgi == 1)
                {
                if(n<N_dir_ref)
                {
                    Dir_XYZ(%N_Directors%*(m-1)+n,1)   = 0;
                    Dir_XYZ(%N_Directors%*(m-1)+n,2)  = fmod(l)*(rd_yloc);
                    Dir_XYZ(%N_Directors%*(m-1)+n,3)   = %NW_Rad%(m)*1e-6 + z_correction;
                }
                if(n == N_dir_ref)
                {
                Refl_XYZ(m,1)  = 0;
                Refl_XYZ(m,2)  = fmod(l)*(rd_yloc);
                Refl_XYZ(m,3)  = %NW_Rad%(m)*1e-6+z_correction ;
                }
                }                
                }  
            }    
        }
        
    }
    
}
}

#Copying waveguide and director elements for creation of ribbon. 
#Calculation of offset must be done BEFORE so copying only requires rotation and x-y-shift relative to zero.

#Move antennas into position and delete fakes
for(i = 1:length(%NW_x%))
{
    for(j=1:N_dir_ref)
    {   
        if((j<=%N_Directors%)&(j>rib_i_start-rib_offset_delay)) 
        {

            #Copying waveguide and director elements for creation of ribbon. 
            #Calculation of offset must be done BEFORE so copying only requires rotation and x-y-shift relative to zero.
            #Sequence needed for RHS == [[-x,-y],[+x,-y],[+x,+y],[-x,+y] ]           
            Rib_modrot = mod(%Rot_Ribbon%,360);
            ROTARRAY = [[-cos(rib_rot),-sin(rib_rot)];
                        [-cos(rib_rot),-sin(rib_rot)];
                        [-cos(rib_rot),-sin(rib_rot)];
                        [-cos(rib_rot),-sin(rib_rot)]]; #So that L * ROTARRAY(val,1) = dx,L * ROTARRAY(val,2) = dy
            if((90>=Rib_modrot)&(Rib_modrot>=0)){dxmod=3;    dymod = 1; rai = 1;}
            if((180>=Rib_modrot)&(Rib_modrot>90)){dxmod=-3;   dymod = 1; rai = 2;}
            if((270>=Rib_modrot)&(Rib_modrot>180)){dxmod=3; dymod = 1; rai = 3;}
            if((360>=Rib_modrot)&(Rib_modrot>270)){dxmod=-3; dymod = 1; rai = 4;}
            DDX = 1/2*%dir_Dy%*%Side_Rib%;   
            xxr = dxmod*rib_sidemod*%dir_x_radius%/2  * cos(rib_rot)*0;
            yyr = dymod*rib_sidemod*%dir_y_radius%/2  * sin(rib_rot)*0;         
            dx  = DDX +  %dir_Dy%/2*ROTARRAY(rai,1) + xxr; #+  dir_x_radius*ROTARRAY(rai,2);
            dy  = (%dir_Dy%/2*ROTARRAY(rai,2)) + yyr ;
            unselectall;
           
            select("Antennas::Antenna_"+num2str(i)+"::Director_"+num2str(j));
            copy(dx,dy);

            set("first axis","z");  
            set("rotation 1",%Rot_Ribbon%);
            set("name","Director_ribbon_"+num2str(j));
        }
    }    
    select("Antennas::Antenna_"+num2str(i));
    set("first axis","z");  
    set("rotation 1",NWRot(i));
    set("x",NWx(i)); set("y",NWy(i)); set("z",NWz(i));
        
    unselectall;    
    
    #Delete FAKE NW parts
    select("Antennas::Antenna_"+num2str(i)+"::Nanowire_"+num2str(i)+"::FAKE_Au"+num2str(i));
    delete;    
    
    #Delete FAKE NW ALD parts    
    select("Antennas::Antenna_"+num2str(i)+"::Nanowire_ALD_"+num2str(i)+"::FAKE_Au_ALD_"+num2str(i));
    delete; 
    
    #Reflector and Director Deletions
    for(j=1:N_dir_ref)
    {   
        #Delete FAKE Director and reflector parts
        select("Antennas::Antenna_"+num2str(i)+"::FAKE_Director_"+num2str(j));
        delete;           
        select("Antennas::Antenna_"+num2str(i)+"::WG_FAKE_Director_"+num2str(j));
        delete;   
        
    }
    
        
      
     
}



#Variable Storage and Transfer - Just for post-calculated param
addstructuregroup;
set('name','Variable Storage');

#Dipole Location - calculated from the relative location of the nanowire tip location
NW_ID = %NW_Emitter_ID%;
x_d = NWx(NW_ID)+%SourceLocation%*1/2*NWL(NW_ID)*sin(NWRot(NW_ID)*pi/180);
y_d = NWy(NW_ID)+%SourceLocation%*1/2*NWL(NW_ID)*cos(NWRot(NW_ID)*pi/180);
z_d = NWz(NW_ID);

xeloc = NWx(NW_ID);
yeloc = NWy(NW_ID);
zeloc = NWz(NW_ID);
mpadL = max(NWL)*%Mon_Pad%;
xespan = abs(NWL(NW_ID)*sin(NWRot(NW_ID)*pi/180))+mpadL+ abs(NWRad(NW_ID)*cos(NWRot(NW_ID)*pi/180));
yespan = abs((NWL(NW_ID)+NWRad(NW_ID)*AU_MOD+AU_zoff)*cos(NWRot(NW_ID)*pi/180))+mpadL;
zespan = abs(2*NWRad(NW_ID))+mpadL;

#Location of dipoles
adduserprop('Dip_x',2,x_d);
adduserprop('Dip_y',2,y_d);
adduserprop('Dip_z',2,z_d);

adduserprop('Em_x',6,xeloc); 
adduserprop('Em_y',6,yeloc);
adduserprop('Em_z',6,zeloc);
adduserprop('Em_xspan',6,xespan); 
adduserprop('Em_yspan',6,yespan);
adduserprop('Em_zspan',6,zespan);

#Location of Directors and Reflectors

adduserprop('Dir_XYZ',6,Dir_XYZ); 
adduserprop('Refl_XYZ',6,Refl_XYZ); 


#Calculating Detector Locations
DID = %NW_Detector_IDs%;
DetNum = length(DID);

xdspan = matrix(DetNum); xdloc  = matrix(DetNum);
ydspan = matrix(DetNum); ydloc  = matrix(DetNum);
zdspan = matrix(DetNum); zdloc  = matrix(DetNum);


#for(i_ID = 1:DetNum){
#    ID = DID(i_ID); 
#    xdspan(i_ID) = abs(NWL(ID)*sin(NWRot(ID)*pi/180))+ mpadL + abs(NWRad(ID)*cos(NWRot(ID)*pi/180));
#    ydspan(i_ID) = abs((NWL(ID)+NWRad(i)*AU_MOD+AU_zoff)*cos(NWRot(ID)*pi/180))+mpadL ;
#    zdspan(i_ID) = abs(2*NWRad(ID))+mpadL;
#    xdloc(i_ID)  = NWx(ID); ydloc(i_ID)  = NWy(ID); zdloc(i_ID)  = NWz(ID);
#}

#adduserprop('Det_x',6,xdloc); 
#adduserprop('Det_y',6,ydloc);
#adduserprop('Det_z',6,zdloc);

#adduserprop('Det_xspan',6,xdspan); 
#adduserprop('Det_yspan',6,ydspan);
#adduserprop('Det_zspan',6,zdspan);

FDTD_xmin_auto = min([-1.25*%refl_Dy%])-%FDTD_padding_x%;
FDTD_xmax_auto = max([1.25*%refl_Dy%])+%FDTD_padding_x%;

FDTD_ymin_auto = min([min(%NW_y%)*1e-6+min(Refl_XYZ(:,2))-%refl_Dx%,min(%NW_y%)*1e-6+min(Dir_XYZ(:,2) + %dir_Dx%)])-%FDTD_padding_y%;
FDTD_ymax_auto = max([max(%NW_y%)*1e-6+max(Refl_XYZ(:,2))+%refl_Dx%,max(%NW_y%)*1e-6+max(Dir_XYZ(:,2))+%dir_Dx%])+%FDTD_padding_y%;

FDTD_zmin_auto = min([zdloc-zdspan/2,zeloc-zespan/2,substrate_zmax])-%FDTD_padding_z%;
FDTD_zmax_auto = max([zdloc+zdspan/2,zeloc+zespan/2,ox_zmax])+%FDTD_padding_z%;

Antenna_Bounds = [[-0.75*%refl_Dy%*1.1,0.75*%refl_Dy%*1.1];
                  [FDTD_ymin_auto+%FDTD_padding_y%*0.05,FDTD_ymax_auto-%FDTD_padding_y%*0.05]; 
                  [-%NW_Rad%(1)*1.1*1e-6,2*%NW_Rad%(1)*1e-6+%NW_Rad%(1)*1.1*1e-6]];

#Add bounds for Antenna enclosed monitors
adduserprop('Antenna_Bounds',6,Antenna_Bounds);

#FDTD_minmax param
adduserprop('FDTD_xmin_auto',2,FDTD_xmin_auto);
adduserprop('FDTD_xmax_auto',2,FDTD_xmax_auto);

adduserprop('FDTD_ymin_auto',2,FDTD_ymin_auto);
adduserprop('FDTD_ymax_auto',2,FDTD_ymax_auto);

adduserprop('FDTD_zmin_auto',2,FDTD_zmin_auto);
adduserprop('FDTD_zmax_auto',2,FDTD_zmax_auto);

###DELETE IF NOT USING!
#"ACTUAL NW Separation"
NW_Separation = 0;#abs(%NW_y%(1) - %NW_y%(2)) - %NW_Len%(1);
adduserprop('NW_Separation',2,NW_Separation*1e-6);