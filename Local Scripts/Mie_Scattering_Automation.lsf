

###########################################################################
# Scriptfile: mie_analysis_3d.lsf
#
# Description:
# This file shows how to use analysis groups in mie_example_3d.fsp to do 4
# types of analyses for 3D Mie scattering
#       1) The far field angular scattering in the x-y, x-z and y-z planes
#       2) The far field XY half space (Note: This calculation can be time consuming)
#       3) The absorption/scattering cross section
#       4) The field enhancement calculation
#
# Copyright 2018, Lumerical Solutions, Inc.
###########################################################################
MieData = struct;

plot_local = false;
# Choose which of the 4 possible analyses you want to do
do_polar_plot = true;         # true to perform the test and false to skip
do_halfspace = false;         # true to perform the test and false to skip
do_cross_sections = true;     # true to perform the test and false to skip
do_field_enhancement = true; # true to perform the test and false to skip

# Define target wavelength used for polar plot and field enhancement when enabled:
target_wavelength = 0.91e-6;

# Define the resolution for the far field plots
polar_plot_res = 51;
halfspace_res = 31; # this number will significantly affect the time to run this analysis

# Far field polar plot and halfspace

setnamed("FDTD_Gen::scat_ff", "target wavelength", target_wavelength);

if(do_polar_plot & do_halfspace ) {
    ?"  Calculating far field angular distribution and halfspace";
    ?"  NOTE: This calculation takes time!!";
    setnamed("FDTD_Gen::scat_ff", "do polar plot",0);
    setnamed("FDTD_Gen::scat_ff", "do halfspace",1);
    setnamed("FDTD_Gen::scat_ff", "halfspace res", halfspace_res);
    setnamed("FDTD_Gen::scat_ff", "polar plot res", polar_plot_res);
    runanalysis("FDTD_Gen::scat_ff");
    ?"  Calculation done!";
}else{
    if(do_polar_plot) {
        ?"  Calculating far field angular distribution";
        setnamed("FDTD_Gen::scat_ff", "do polar plot",0);
        setnamed("FDTD_Gen::scat_ff", "do halfspace",0);
        setnamed("FDTD_Gen::scat_ff", "halfspace res", halfspace_res);
        setnamed("FDTD_Gen::scat_ff", "polar plot res", polar_plot_res);
        runanalysis("FDTD_Gen::scat_ff");
    }
    if(do_halfspace) { # only for 3D simulation
        ?"  Calculating far field halfspace";
        ?"  NOTE: This calculation takes time!!";
        setnamed("FDTD_Gen::scat_ff", "do polar plot",0);
        setnamed("FDTD_Gen::scat_ff", "do halfspace",1);
        setnamed("FDTD_Gen::scat_ff", "halfspace res", halfspace_res);
        setnamed("FDTD_Gen::scat_ff", "polar plot res", polar_plot_res);
        runanalysis("FDTD_Gen::scat_ff");
        ?"  Calculation done!";
    }
}

if(do_polar_plot) {
    XY = getresult("FDTD_Gen::scat_ff","XY");
    f1 = getnamed("FDTD_Gen::mie_source","frequency start");
    f2 = getnamed("FDTD_Gen::mie_source","frequency stop");
    n2 = getfdtdindex("Au (Gold) - Palik",XY.f,f1,f2);
    n1 = str2num(getnamed("FDTD_Gen::FDTD","index"));
    m = n2/n1;
    r = (getnamed("SceneConstructor","Dx")+getnamed("SceneConstructor","Dy")+getnamed("SceneConstructor","Dz"))/3; # the radius of the mie particle
    size_parameter = 2*pi*r/XY.lambda * n1;
    phi = XY.phi;
    theta = 90*pi/180;
    S = mie3ds12(cos(theta),m,size_parameter);
    k = meshgridy(phi,2*pi/XY.lambda * n1);
    phi = meshgridx(phi,2*pi/XY.lambda * n1);
    R = 1;
    fpoint = find(XY.lambda,target_wavelength);
    Etheta = exp(1i*k*R)/(-1i*k*R)*cos(phi)*meshgridy(XY.phi,S.S2);
    Ephi = exp(1i*k*R)/(1i*k*R)*sin(phi)*meshgridy(XY.phi,S.S1);
    if(plot_local)
    {        
    polar(XY.phi,pinch(XY.E2,2,fpoint),pinch(abs(Etheta)^2+abs(Ephi)^2,2,fpoint),"","","XY");
    }
    YZ = getresult("FDTD_Gen::scat_ff","YZ");
    phi = 90*pi/180;
    theta = YZ.phi-pi/2;
    S = mie3ds12(cos(theta),m,size_parameter);
    k = meshgridy(theta,2*pi/YZ.lambda * n1);
    Etheta = exp(1i*k*R)/(-1i*k*R)*cos(phi)*S.S2;
    Ephi = exp(1i*k*R)/(1i*k*R)*sin(phi)*S.S1;
    if(plot_local)
    {        
    polar(YZ.phi,pinch(YZ.E2,2,fpoint),pinch(abs(Etheta)^2+abs(Ephi)^2,2,fpoint),"","","YZ");
    }
    
    XZ = getresult("FDTD_Gen::scat_ff","XZ");
    phi = 0;
    theta = XZ.phi-pi/2;
    S = mie3ds12(cos(theta),m,size_parameter);
    k = meshgridy(theta,2*pi/XZ.lambda * n1);
    Etheta = exp(1i*k*R)/(-1i*k*R)*cos(phi)*S.S2;
    Ephi = exp(1i*k*R)/(1i*k*R)*sin(phi)*S.S1;
    if(plot_local)
    {        
    polar(XZ.phi,pinch(XZ.E2,2,fpoint),pinch(abs(Etheta)^2+abs(Ephi)^2,2,fpoint),"","","XZ");
    }
}

MieData.Csects = struct;
# Cross section analysis
if(do_cross_sections) {
    ?"  Calculating scattering and absorption cross sections";
    
    # get sigma and particle radius
    sigmaabs = getresult("FDTD_Gen::total","sigma");
    sigmascat = getresult("FDTD_Gen::scat","sigma");
    r = (getnamed("SceneConstructor","Dx")+getnamed("SceneConstructor","Dy")+getnamed("SceneConstructor","Dz"))/3;
    
    # Calculate cross-sections normalized to the particle area
    Qscat = sigmascat.sigma/(pi*r^2);
    Qabs  = -sigmaabs.sigma/(pi*r^2);
    lambda = sigmaabs.lambda;
    
    # calculate the size parameter
    size_parameter = 2*pi*r/lambda * n1;
    
    # compare with analytic based on material fit
    mat = getnamed("SceneConstructor::Director::circle","material");
    n2 = getfdtdindex(mat,sigmaabs.f,min(sigmaabs.f),max(sigmaabs.f));
    n1 = str2num(getnamed("FDTD_Gen::FDTD","index"));
    m = n2/n1;
    Qtheory = mie3d(m,size_parameter);
    MieData.Csects.n1 = n1;  MieData.Csects.n2 = n2; MieData.Csects.Scattheory = Qtheory.Qscat; MieData.Csects.Scatsim = Qscat; MieData.Csects.size_parameter = size_parameter;
    MieData.Csects.Abstheory = Qtheory.Qabs; MieData.Csects.Abssim = Qabs;    
    if(plot_local)
    {    
    # Plot results
    plot(size_parameter,Qscat,Qtheory.Qscat,"size parameter","Mie efficiency","Scattering cross section");
    legend("FDTD_Gen::FDTD","Mie theory");
    plot(size_parameter,Qabs,Qtheory.Qabs, "size parameter","Mie efficiency","Absorption cross section");
    legend("FDTD_Gen::FDTD","Mie theory");
    }
}

# Field enhancement
if(do_field_enhancement) {
    ?"  Calculating field enhancement";
    E = getresult("FDTD_Gen::z_normal_profile","E");
    #E = getresult("FDTD_Gen::x_normal_profile","E");
    #E2 = E.E2; # returns |E|^2
    #y = E.y;
    #z = E.z;
    #lambda = E.lambda;
    
    
    # choose one frequency point for the images
    fpoint = find(E.f, c/target_wavelength);
    
    # image the total field near the particle
    if(plot_local)
    {    
    image(y*1e9,z*1e9,pinch(E2,4,fpoint),"y (nm)","z (nm)","|E|^2 in y-z plane at "+num2str(lambda(fpoint)*1e9)+" nm");
    ?"    Maximum field enhancement over all wavelengths (|E|^2/|Einc|^2) in y-z plane is: " + num2str(max(E2));
    }
        
    #E = getresult("FDTD_Gen::y_normal_profile","E");
    #E2 = E.E2; # returns |E|^2
    #x = E.x;
    #z = E.z;
      
    if(plot_local)
    {    
    image(x*1e9,z*1e9,pinch(E2,4,fpoint),"x (nm)","z (nm)","|E|^2 in x-z plane at "+num2str(lambda(fpoint)*1e9)+" nm");
    ?"    Maximum field enhancement over all wavelengths (|E|^2/|Einc|^2) in x-z plane is: " + num2str(max(E2));
    }
    
    
    #WE only save the z profile for all cross sections
    #E = getresult("FDTD_Gen::z_normal_profile","E");
    E2 = E.E2; # returns |E|^2
    x = E.x;
    y = E.y;
    if(plot_local)
    {    
    image(x*1e9,y*1e9,pinch(E2,4,fpoint),"x (nm)","y (nm)","|E|^2 in x-y plane at "+num2str(lambda(fpoint)*1e9)+" nm");
    ?"    Maximum field enhancement over all wavelengths (|E|^2/|Einc|^2) in x-y plane is: " + num2str(max(E2));     
    }
    filename=DIR+OUTPUT+'_field_Enhancement';
    MieData.FieldEnhancement = struct;
    MieData.FieldEnhancement.E = E;
    MieData.FieldEnhancement.fpoint = fpoint;
    
    matlabsave(filename, MieData);
}

